 1."scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  }, change to "dev" : "nodemon src/index.js"

  2.folders
  {
    Controllers:This folder typically contains modules or files that handle incoming HTTP requests, interact with the model (data), and send the appropriate response back to the client. (req,res,next)
    Models: The models folder holds files that define the data structures and interact with the database. 
  Routes
  Middleware 
  utils-that provide commonly used functionality across different parts of the application. Utilities can help avoid code duplication and improve maintainability.
  }

 3. require('dotenv').config({path:'./env'})-- to run enviroment variables 
 
 4. restart the server everytime there is a change in the environment variables
  remove the net/ - net 

  5.custom errors and custom api - seperate folders 

  6.req.params-
  req.body
  req.cookies
6.learn axios , proxy 


cors- settings change for resource sharing 
      app.use(cors())
cors- cross orgin 
      differ requests can be send from diff origins to servers, (url , port) - cors 
      whitelist - domain / api whitelist
      define the origin
CORS_ORIGIN=* // request from any where 
whitelist - websites that are allowed to make requests to 
/// const corsOptions = {
    origin: 'http://example.com', // Allow requests from this origin
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE', // Allowed HTTP methods
    credentials: true, // Allow including credentials in cross-origin requests
    optionsSuccessStatus: 204, // Set the preflight response status code
};

app.use(cors(corsOptions));


user model and video user 

7.wrap in try .. catch or promises 


8 . direct  encryption is not possible so we use hooks --- pre middleware 


9.Hooks are functions that Mongoose invokes before or after specific events, such as document validation, saving, or removing.
Usage: You can use hooks to add custom logic to model events


pre - executed before
//bcryptjs -- hash passwords 
//jwt - tokens (jsonwebtokens)   ---jwt.io
jwt - beare token 



10.const token = jwt.sign(payload, secretKey, options);
Explanation of the parameters:

payload: This is an object containing the claims or information you want to encode in the JWT. It can include things like user ID, username, roles, or any other relevant information.

secretKey: This is a secret key used to sign the JWT. It should be kept secure, as it's used to verify the integrity of the token.

options: This is an optional parameter that can include additional settings for the token, such as the expiration time (expiresIn). The expiresIn option specifies the expiration time of the token, and it can be expressed in seconds (e.g., '1h' for 1 hour).
The resulting JWT can be sent to clients or stored on the server.



11. file handling - 3rd party , aws 


express , mongoose , dotenv , bcryptjs ,mongoose-aggregate-paginate 
custom error , custom routes , middleware 

multer --- middleware 
       inject it whereever we need to upload file 